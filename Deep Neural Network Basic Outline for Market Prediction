#Adapted from Hilpisch 2021
#Deep NN Strategy

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from sklearn.preprocessing import StandardScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam

def get_data(symbol, start_date, end_date):
    data = yf.download(symbol, start=start_date, end=end_date)
    data['Returns'] = np.log(data['Adj Close'] / data['Adj Close'].shift(1))
    data.dropna(inplace=True)
    return data

def prepare_features(data, lags=3):
    for lag in range(1, lags + 1):
        data[f'Lag_{lag}'] = data['Returns'].shift(lag)
    data.dropna(inplace=True)
    scaler = StandardScaler()
    X = scaler.fit_transform(data[[f'Lag_{i}' for i in range(1, lags + 1)]])
    return X, data['Returns']

def build_model(input_shape):
    model = Sequential()
    model.add(Dense(64, input_dim=input_shape, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer=Adam(), loss='binary_crossentropy')
    return model

def fit_model(X, y):
    model = build_model(X.shape[1])
    y_sign = np.where(y > 0, 1, 0)  # Binary classification (1: up, 0: down)
    model.fit(X, y_sign, epochs=10, batch_size=32, verbose=1)
    return model

def run_strategy(data, model, X, transaction_cost=0.0):
    data['Prediction'] = model.predict(X).round()
    data['Strategy'] = data['Prediction'].shift(1) * data['Returns']
    data['Cumulative_Strategy'] = (data['Strategy'] - transaction_cost).cumsum().apply(np.exp)
    data['Cumulative_Market'] = data['Returns'].cumsum().apply(np.exp)

    plt.figure(figsize=(10, 6))
    plt.plot(data.index, data['Cumulative_Strategy'], label='Strategy')
    plt.plot(data.index, data['Cumulative_Market'], label='Market')
    plt.legend()
    plt.show()

def execute_strategy(symbol='SPY', start_date='2022-01-01', end_date='2023-01-01', lags=3, transaction_cost=0.001):
    data = get_data(symbol, start_date, end_date)
    X, y = prepare_features(data, lags)
    model = fit_model(X, y)
    run_strategy(data, model, X, transaction_cost)

execute_strategy()
